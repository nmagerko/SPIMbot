CS 233 SPIMbot

We chose to focus our bot's efforts exclusively on obtaining a high yield. Instead of trying to
divide time between planting/harvesting and sabotage, our bot works to outplay opponents by 
simply planting/harvesting as quickly as possible. By optimizing our bot for rapid resource 
collection and a practical planting pattern, we expect that our bot will simultaneously be 
effective in completing its tasks as well as be tolerant of sabatoge from other bots.

The base planting pattern exists to maximize how many plants can be placed per unit time and
how many plants can be harvested per unit time. Specifically, we choose nine sets of four tiles
at runtime to be our planting surface (see Figure 1). We travel in such a way that we arrive
at the middle of each set, and then can plant/water/harvest just by moving in the x- or y- 
directions by a few pixels; we never travel to the center of any one tile, but rather towards
the intersection of them all. We continuously move from one set to another in a clockwise spiral 
fashion, collecting all available plants, then re-planting and watering.

The pattern is resilient to fires, as setting fires in any one of our sets will not affect plants 
in any other sets. At the same time, we do attempt to put out fires when returning to a set in order
to salvage any work that we previously did. The pattern is also optimal for performing common
actions such as harvesting and watering, since very little movement is required to move to tiles 
within the same set.

However, when performing this many actions over multiple sets, resources are depleted almost
immediately. In order to maximize what our bot could accomplish, we made several optimizations.
To begin, we move asynchronously. We orient our bot in the desired direction using the taylor
series approximation of tangent and then allow a timer interrupt handler to stop the bot when
it arrives at the expected location. With this free time available during moves, we decided to
make another optimization involving puzzle solving. That is, we queue up to two puzzles at a time
for solving (in order to reduce the time spendt waiting for a new puzzle) and then solve the
queued puzzles whenever we move significant distances. This means that, while we are moving between
sets, we can obtain more resources instead of arriving and having to solve puzzles at the planting
location. Lastly, the nature of the planting pattern (as suggested before) is an optimization
itself, as it permits us to touch all tiles in a set without having to move very far.

Solo tests of this bot have yielded satisfactory results.

-------------------------------------------------
|  x  |  x  |     |  x  |  x  |     |  x  |  x  |
--------------->----------------->---------------
|  x  |  x  |     |  x  |  x  |     |  x  |  x  |
-------------------------------------------------
|     ^     |     |           |     |     v     |
-------------------------------------------------
|  x  |  x  |     |  x  |  x  |     |  x  |  x  |
---------------------------------<---------------
|  x  |  x  |     |  x  |  x  |     |  x  |  x  |
-------------------------------------------------
|     ^     |     |     |     |  ↘︎   |     |     |
-------------------------------------------------
|  x  |  x  |     |  x  |  x  |     |  x  |  x  |
---------------<-----------------<---------------
|  x  |  x  |     |  x  |  x  |     |  x  |  x  |
-------------------------------------------------
Figure 1. The planting pattern. 
x's represents a possible seed 
placement. Arrows represent 
bot's movement path.
